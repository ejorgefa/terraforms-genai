name: Create Remote State

on:
  push:
    branches: [dev]
  pull_request:
    branches: [ main ]
# Allows to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  PROCESS: Planning
  WORKING_DIRECTORY: ./

permissions: read-all

jobs:
  deploy-azure-infra-terraform:
    name: Deploy to Azure with Terraform
    runs-on: ubuntu-latest
    environment: Development

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.WORKING_DIRECTORY }}
    
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to Azure with Service Principal
        uses: Azure/login@v1.4.3
        with:
          # Paste output of `az ad sp create-for-rbac` as value of secret variable: AZURE_CREDENTIALS
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Create Terraform backend state storage
        run: |

          echo "ðŸŽ¯ Getting resource group named: " ${{ vars.RESOURCE_GROUP_NAME }}
          RG_EXISTS=$(az group exists --name ${{ vars.RESOURCE_GROUP_NAME }} )
          if [ $RG_EXISTS == "false" ]; then
            echo "Resource group not found, creating... "
            az group create --name ${{ vars.RESOURCE_GROUP_NAME }} --location ${{ vars.LOCATION }}
          fi
          RESOURCE_GROUP_ID=$(az group show -n ${{ vars.RESOURCE_GROUP_NAME }}  -o tsv --query id)

          echo "ðŸŽ¯ Getting storage account named: " ${{ vars.STORAGE_ACCOUNT_NAME }}
          STORAGE_ACCOUNT_NOT_FOUND=$(az storage account check-name --name ${{ vars.STORAGE_ACCOUNT_NAME }}  --query nameAvailable)
          if [ $STORAGE_ACCOUNT_NOT_FOUND == "true" ]; then
              echo ""
              echo "Storage account not found. Creating..."
            az storage account create --resource-group ${{ vars.RESOURCE_GROUP_NAME }} --name ${{ vars.STORAGE_ACCOUNT_NAME }}  --sku Standard_LRS --encryption-services blob
          fi
          STORAGE_ACCOUNT=$(az storage account show --name ${{ vars.STORAGE_ACCOUNT_NAME }}  -o tsv --query id)

          echo "ðŸŽ¯ Getting storage account container named: " ${{ vars.CONTAINER_NAME }}
          STORAGE_COUNTAINER_EXISTS=$(az storage container exists --name ${{ vars.CONTAINER_NAME }} --account-name ${{ vars.STORAGE_ACCOUNT_NAME }}  --query exists)
          if [ $STORAGE_COUNTAINER_EXISTS == "false" ]; then
            echo ""
            echo "Blob container not found. Creating..."
            az storage container create --name ${{ vars.CONTAINER_NAME }} --account-name ${{ vars.STORAGE_ACCOUNT_NAME }}
          fi
          STORAGE_CONTAINER=$(az storage account show --name ${{ vars.STORAGE_ACCOUNT_NAME }}   -o tsv --query primaryEndpoints.blob)${{ vars.CONTAINER_NAME }}