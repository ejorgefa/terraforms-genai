name: Create Infra with Terraforn

on:
  push:
    branches: [dev]
  # pull_request:
  #   branches: [ main ]
# Allows to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  PROCESS: planning
  WORKING_DIRECTORY: .github/terraform

permissions: read-all

jobs:

  scan-terraform-config:
    runs-on: ubuntu-latest
    name: Scan Terraform with Checov
    steps:
      - name: Checkout repo
        uses: actions/checkout@master

      - name: Run Checkov Scan
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: ${{ env.WORKING_DIRECTORY }}
          soft_fail: true # optional: do not return an error code if there are failed checks
          # check: CKV_AWS_1 # optional: run only a specific check_id. can be comma separated list
          # skip_check: CKV_AWS_2 # optional: skip a specific check_id. can be comma separated list
          # quiet: true # optional: display only failed checks
          # framework: terraform # optional: run only on a specific infrastructure {cloudformation,terraform,kubernetes,all}
          # output_format: sarif # optional: the output format, one of: cli, json, junitxml, github_failed_only, or sarif. Default: sarif
          # download_external_modules: true # optional: download external terraform modules from public git repositories and terraform registry
          # log_level: DEBUG # optional: set log level. Default WARNING
          # config_file: path/this_file
          # baseline: cloudformation/.checkov.baseline # optional: Path to a generated baseline file. Will only report results not in the baseline.
          # container_user: 1000 # optional: Define what UID and / or what GID to run the container under to prevent permission issues

  deploy-azure-infra-terraform:
    name: Deploy to Azure with Terraform
    runs-on: ubuntu-latest
    environment: Development
    needs: [scan-terraform-config]

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: Login to Azure with Service Principal
        uses: Azure/login@v2.2.0
        with:
          # Paste output of `az ad sp create-for-rbac` as value of secret variable: AZURE_CREDENTIALS
          creds: ${{ secrets.AZURE_CREDENTIALS }}
   
      - name: Create Terraform backend state storage
        run: |
          echo "ðŸŽ¯ Setting default subscription for: " ${{ secrets.SUBSCRIPTION_ID }}
          az account set --subscription ${{ secrets.SUBSCRIPTION_ID }}

          echo "ðŸŽ¯ Getting resource group named: " ${{ vars.RESOURCE_GROUP_NAME }}
          RG_EXISTS=$(az group exists --name ${{ vars.RESOURCE_GROUP_NAME }} )
          if [ $RG_EXISTS == "false" ]; then
            echo "Resource group not found, creating... "
            az group create --name ${{ vars.RESOURCE_GROUP_NAME }} --location ${{ vars.LOCATION }}
          fi
          RESOURCE_GROUP_ID=$(az group show -n ${{ vars.RESOURCE_GROUP_NAME }}  -o tsv --query id)

          echo "ðŸŽ¯ Getting storage account named: " ${{ vars.STORAGE_ACCOUNT_NAME }}
          STORAGE_ACCOUNT_NOT_FOUND=$(az storage account check-name --name ${{ vars.STORAGE_ACCOUNT_NAME }}  --query nameAvailable)
          if [ $STORAGE_ACCOUNT_NOT_FOUND == "true" ]; then
              echo ""
              echo "Storage account not found. Creating..."
            az storage account create --resource-group ${{ vars.RESOURCE_GROUP_NAME }} --name ${{ vars.STORAGE_ACCOUNT_NAME }}  --sku Standard_LRS --encryption-services blob
          fi
          STORAGE_ACCOUNT=$(az storage account show --name ${{ vars.STORAGE_ACCOUNT_NAME }}  -o tsv --query id)

          echo "ðŸŽ¯ Getting storage account container named: " ${{ vars.CONTAINER_NAME }}
          STORAGE_COUNTAINER_EXISTS=$(az storage container exists --name ${{ vars.CONTAINER_NAME }} --account-name ${{ vars.STORAGE_ACCOUNT_NAME }}  --query exists)
          if [ $STORAGE_COUNTAINER_EXISTS == "false" ]; then
            echo ""
            echo "Blob container not found. Creating..."
            az storage container create --name ${{ vars.CONTAINER_NAME }} --account-name ${{ vars.STORAGE_ACCOUNT_NAME }}
          fi
          STORAGE_CONTAINER=$(az storage account show --name ${{ vars.STORAGE_ACCOUNT_NAME }}   -o tsv --query primaryEndpoints.blob)${{ vars.CONTAINER_NAME }}

          echo "ðŸŽ¯ Getting storage account key..."
          STORAGE_ACCOUNT_KEY=$(az storage account keys list --resource-group ${{ vars.RESOURCE_GROUP_NAME }}  --account-name ${{ vars.STORAGE_ACCOUNT_NAME }} --query "[0].value" -o tsv)

          echo "ðŸŽ¯ Getting storage connection string..."
          STORAGE_ACCOUNT_CONNECTION_STRING=$(az storage account show-connection-string --resource-group ${{ vars.RESOURCE_GROUP_NAME }}  --name ${{ vars.STORAGE_ACCOUNT_NAME }} --query "connectionString"  -o tsv)
          echo $STORAGE_ACCOUNT_CONNECTION_STRING

      - name: Getting ACR credentials
        run: |
          
          echo "ðŸŽ¯ Setting default subscription for: " ${{ secrets.SUBSCRIPTION_ACR_ID }}
          az account set --subscription ${{ secrets.SUBSCRIPTION_ACR_ID }}
          
          echo "ðŸŽ¯ Getting container registry data..."
          ACR_PASSWORD=$(az acr credential show --name ${{ vars.ACR_SERVER }} | jq -r '.passwords[0].value')
          ACR_USERNAME=$(az acr credential show --name ${{ vars.ACR_SERVER }} | jq -r '.username')

          echo "ðŸŽ¯ Changing default subscription for: " ${{ secrets.SUBSCRIPTION_ID }}
          az account set --subscription ${{ secrets.SUBSCRIPTION_ID }}

      # Install the latest version of Terraform CLI
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          directory: ${{ env.WORKING_DIRECTORY }}
          terraform_version: 1.9.8
